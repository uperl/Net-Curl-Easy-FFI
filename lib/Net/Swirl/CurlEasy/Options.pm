package Net::Swirl::CurlEasy::Options {

  use warnings;
  use 5.020;

  # ABSTRACT: Full list of options supported by Net::Swirl::CurlEasy

  # NOTE: This document is autogenerated from the template
  # maint/tt/Option.pm.tt
  # Please see maint/README.md for details on updating.

=head1 SYNOPSIS

 $curl->setopt( url => "https://alienfile.org" );

=head1 DESCRIPTION

This document contains the full list of options supported by L<Net::Swirl::CurlEasy>.
These options are set via the L<setopt method|Net::Swirl::CurlEasy/setopt>.

=begin stopwords

abstract_unix_socket CURLOPT_ABSTRACT_UNIX_SOCKET accept_encoding CURLOPT_ACCEPT_ENCODING accepttimeout_ms CURLOPT_ACCEPTTIMEOUT_MS address_scope CURLOPT_ADDRESS_SCOPE altsvc CURLOPT_ALTSVC altsvc_ctrl CURLOPT_ALTSVC_CTRL append CURLOPT_APPEND autoreferer CURLOPT_AUTOREFERER aws_sigv4 CURLOPT_AWS_SIGV4 buffersize CURLOPT_BUFFERSIZE cainfo CURLOPT_CAINFO capath CURLOPT_CAPATH certinfo CURLOPT_CERTINFO connect_only CURLOPT_CONNECT_ONLY connect_to CURLOPT_CONNECT_TO connecttimeout CURLOPT_CONNECTTIMEOUT connecttimeout_ms CURLOPT_CONNECTTIMEOUT_MS cookie CURLOPT_COOKIE cookiefile CURLOPT_COOKIEFILE cookiejar CURLOPT_COOKIEJAR cookielist CURLOPT_COOKIELIST cookiesession CURLOPT_COOKIESESSION copypostfields CURLOPT_COPYPOSTFIELDS crlf CURLOPT_CRLF crlfile CURLOPT_CRLFILE customrequest CURLOPT_CUSTOMREQUEST default_protocol CURLOPT_DEFAULT_PROTOCOL dirlistonly CURLOPT_DIRLISTONLY disallow_username_in_url CURLOPT_DISALLOW_USERNAME_IN_URL dns_cache_timeout CURLOPT_DNS_CACHE_TIMEOUT dns_interface CURLOPT_DNS_INTERFACE dns_local_ip4 CURLOPT_DNS_LOCAL_IP4 dns_local_ip6 CURLOPT_DNS_LOCAL_IP6 dns_servers CURLOPT_DNS_SERVERS dns_shuffle_addresses CURLOPT_DNS_SHUFFLE_ADDRESSES dns_use_global_cache CURLOPT_DNS_USE_GLOBAL_CACHE doh_ssl_verifyhost CURLOPT_DOH_SSL_VERIFYHOST doh_ssl_verifypeer CURLOPT_DOH_SSL_VERIFYPEER doh_ssl_verifystatus CURLOPT_DOH_SSL_VERIFYSTATUS doh_url CURLOPT_DOH_URL egdsocket CURLOPT_EGDSOCKET expect_100_timeout_ms CURLOPT_EXPECT_100_TIMEOUT_MS failonerror CURLOPT_FAILONERROR filetime CURLOPT_FILETIME followlocation CURLOPT_FOLLOWLOCATION forbid_reuse CURLOPT_FORBID_REUSE fresh_connect CURLOPT_FRESH_CONNECT ftp_account CURLOPT_FTP_ACCOUNT ftp_alternative_to_user CURLOPT_FTP_ALTERNATIVE_TO_USER ftp_create_missing_dirs CURLOPT_FTP_CREATE_MISSING_DIRS ftp_skip_pasv_ip CURLOPT_FTP_SKIP_PASV_IP ftp_ssl_ccc CURLOPT_FTP_SSL_CCC ftp_use_eprt CURLOPT_FTP_USE_EPRT ftp_use_epsv CURLOPT_FTP_USE_EPSV ftp_use_pret CURLOPT_FTP_USE_PRET ftpport CURLOPT_FTPPORT happy_eyeballs_timeout_ms CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS haproxyprotocol CURLOPT_HAPROXYPROTOCOL header CURLOPT_HEADER headerdata CURLOPT_HEADERDATA headerfunction CURLOPT_HEADERFUNCTION hsts CURLOPT_HSTS hsts_ctrl CURLOPT_HSTS_CTRL http09_allowed CURLOPT_HTTP09_ALLOWED http200aliases CURLOPT_HTTP200ALIASES http_content_decoding CURLOPT_HTTP_CONTENT_DECODING http_transfer_decoding CURLOPT_HTTP_TRANSFER_DECODING httpget CURLOPT_HTTPGET httpheader CURLOPT_HTTPHEADER httpproxytunnel CURLOPT_HTTPPROXYTUNNEL ignore_content_length CURLOPT_IGNORE_CONTENT_LENGTH infilesize CURLOPT_INFILESIZE infilesize_large CURLOPT_INFILESIZE_LARGE interface CURLOPT_INTERFACE issuercert CURLOPT_ISSUERCERT keep_sending_on_error CURLOPT_KEEP_SENDING_ON_ERROR keypasswd CURLOPT_KEYPASSWD krblevel CURLOPT_KRBLEVEL localport CURLOPT_LOCALPORT localportrange CURLOPT_LOCALPORTRANGE login_options CURLOPT_LOGIN_OPTIONS low_speed_limit CURLOPT_LOW_SPEED_LIMIT low_speed_time CURLOPT_LOW_SPEED_TIME mail_auth CURLOPT_MAIL_AUTH mail_from CURLOPT_MAIL_FROM mail_rcpt CURLOPT_MAIL_RCPT mail_rcpt_alllowfails CURLOPT_MAIL_RCPT_ALLLOWFAILS max_recv_speed_large CURLOPT_MAX_RECV_SPEED_LARGE max_send_speed_large CURLOPT_MAX_SEND_SPEED_LARGE maxage_conn CURLOPT_MAXAGE_CONN maxconnects CURLOPT_MAXCONNECTS maxfilesize CURLOPT_MAXFILESIZE maxfilesize_large CURLOPT_MAXFILESIZE_LARGE maxlifetime_conn CURLOPT_MAXLIFETIME_CONN maxredirs CURLOPT_MAXREDIRS mime_options CURLOPT_MIME_OPTIONS netrc_file CURLOPT_NETRC_FILE new_directory_perms CURLOPT_NEW_DIRECTORY_PERMS new_file_perms CURLOPT_NEW_FILE_PERMS nobody CURLOPT_NOBODY noprogress CURLOPT_NOPROGRESS noproxy CURLOPT_NOPROXY nosignal CURLOPT_NOSIGNAL password CURLOPT_PASSWORD path_as_is CURLOPT_PATH_AS_IS pinnedpublickey CURLOPT_PINNEDPUBLICKEY pipewait CURLOPT_PIPEWAIT port CURLOPT_PORT post CURLOPT_POST postfields CURLOPT_POSTFIELDS postfieldsize CURLOPT_POSTFIELDSIZE postfieldsize_large CURLOPT_POSTFIELDSIZE_LARGE postquote CURLOPT_POSTQUOTE pre_proxy CURLOPT_PRE_PROXY prequote CURLOPT_PREQUOTE protocols CURLOPT_PROTOCOLS protocols_str CURLOPT_PROTOCOLS_STR proxy CURLOPT_PROXY proxy_cainfo CURLOPT_PROXY_CAINFO proxy_capath CURLOPT_PROXY_CAPATH proxy_crlfile CURLOPT_PROXY_CRLFILE proxy_issuercert CURLOPT_PROXY_ISSUERCERT proxy_keypasswd CURLOPT_PROXY_KEYPASSWD proxy_pinnedpublickey CURLOPT_PROXY_PINNEDPUBLICKEY proxy_service_name CURLOPT_PROXY_SERVICE_NAME proxy_ssl_cipher_list CURLOPT_PROXY_SSL_CIPHER_LIST proxy_ssl_options CURLOPT_PROXY_SSL_OPTIONS proxy_ssl_verifyhost CURLOPT_PROXY_SSL_VERIFYHOST proxy_ssl_verifypeer CURLOPT_PROXY_SSL_VERIFYPEER proxy_sslcert CURLOPT_PROXY_SSLCERT proxy_sslcerttype CURLOPT_PROXY_SSLCERTTYPE proxy_sslkey CURLOPT_PROXY_SSLKEY proxy_sslkeytype CURLOPT_PROXY_SSLKEYTYPE proxy_tls13_ciphers CURLOPT_PROXY_TLS13_CIPHERS proxy_tlsauth_password CURLOPT_PROXY_TLSAUTH_PASSWORD proxy_tlsauth_type CURLOPT_PROXY_TLSAUTH_TYPE proxy_tlsauth_username CURLOPT_PROXY_TLSAUTH_USERNAME proxy_transfer_mode CURLOPT_PROXY_TRANSFER_MODE proxyheader CURLOPT_PROXYHEADER proxypassword CURLOPT_PROXYPASSWORD proxyport CURLOPT_PROXYPORT proxyusername CURLOPT_PROXYUSERNAME proxyuserpwd CURLOPT_PROXYUSERPWD put CURLOPT_PUT quote CURLOPT_QUOTE random_file CURLOPT_RANDOM_FILE range CURLOPT_RANGE readdata CURLOPT_READDATA readfunction CURLOPT_READFUNCTION redir_protocols CURLOPT_REDIR_PROTOCOLS redir_protocols_str CURLOPT_REDIR_PROTOCOLS_STR referer CURLOPT_REFERER request_target CURLOPT_REQUEST_TARGET resolve CURLOPT_RESOLVE resume_from CURLOPT_RESUME_FROM resume_from_large CURLOPT_RESUME_FROM_LARGE rtsp_client_cseq CURLOPT_RTSP_CLIENT_CSEQ rtsp_server_cseq CURLOPT_RTSP_SERVER_CSEQ rtsp_session_id CURLOPT_RTSP_SESSION_ID rtsp_stream_uri CURLOPT_RTSP_STREAM_URI rtsp_transport CURLOPT_RTSP_TRANSPORT sasl_authzid CURLOPT_SASL_AUTHZID sasl_ir CURLOPT_SASL_IR server_response_timeout CURLOPT_SERVER_RESPONSE_TIMEOUT service_name CURLOPT_SERVICE_NAME socks5_auth CURLOPT_SOCKS5_AUTH socks5_gssapi_nec CURLOPT_SOCKS5_GSSAPI_NEC socks5_gssapi_service CURLOPT_SOCKS5_GSSAPI_SERVICE ssh_compression CURLOPT_SSH_COMPRESSION ssh_host_public_key_md5 CURLOPT_SSH_HOST_PUBLIC_KEY_MD5 ssh_host_public_key_sha256 CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256 ssh_knownhosts CURLOPT_SSH_KNOWNHOSTS ssh_private_keyfile CURLOPT_SSH_PRIVATE_KEYFILE ssh_public_keyfile CURLOPT_SSH_PUBLIC_KEYFILE ssl_cipher_list CURLOPT_SSL_CIPHER_LIST ssl_ec_curves CURLOPT_SSL_EC_CURVES ssl_enable_alpn CURLOPT_SSL_ENABLE_ALPN ssl_enable_npn CURLOPT_SSL_ENABLE_NPN ssl_falsestart CURLOPT_SSL_FALSESTART ssl_sessionid_cache CURLOPT_SSL_SESSIONID_CACHE ssl_verifyhost CURLOPT_SSL_VERIFYHOST ssl_verifypeer CURLOPT_SSL_VERIFYPEER ssl_verifystatus CURLOPT_SSL_VERIFYSTATUS sslcert CURLOPT_SSLCERT sslcerttype CURLOPT_SSLCERTTYPE sslengine CURLOPT_SSLENGINE sslengine_default CURLOPT_SSLENGINE_DEFAULT sslkey CURLOPT_SSLKEY sslkeytype CURLOPT_SSLKEYTYPE stream_weight CURLOPT_STREAM_WEIGHT suppress_connect_headers CURLOPT_SUPPRESS_CONNECT_HEADERS tcp_fastopen CURLOPT_TCP_FASTOPEN tcp_keepalive CURLOPT_TCP_KEEPALIVE tcp_keepidle CURLOPT_TCP_KEEPIDLE tcp_keepintvl CURLOPT_TCP_KEEPINTVL tcp_nodelay CURLOPT_TCP_NODELAY telnetoptions CURLOPT_TELNETOPTIONS tftp_blksize CURLOPT_TFTP_BLKSIZE tftp_no_options CURLOPT_TFTP_NO_OPTIONS timeout CURLOPT_TIMEOUT timeout_ms CURLOPT_TIMEOUT_MS timevalue CURLOPT_TIMEVALUE timevalue_large CURLOPT_TIMEVALUE_LARGE tls13_ciphers CURLOPT_TLS13_CIPHERS tlsauth_password CURLOPT_TLSAUTH_PASSWORD tlsauth_type CURLOPT_TLSAUTH_TYPE tlsauth_username CURLOPT_TLSAUTH_USERNAME transfer_encoding CURLOPT_TRANSFER_ENCODING transfertext CURLOPT_TRANSFERTEXT unix_socket_path CURLOPT_UNIX_SOCKET_PATH unrestricted_auth CURLOPT_UNRESTRICTED_AUTH upkeep_interval_ms CURLOPT_UPKEEP_INTERVAL_MS upload CURLOPT_UPLOAD upload_buffersize CURLOPT_UPLOAD_BUFFERSIZE url CURLOPT_URL useragent CURLOPT_USERAGENT username CURLOPT_USERNAME userpwd CURLOPT_USERPWD verbose CURLOPT_VERBOSE wildcardmatch CURLOPT_WILDCARDMATCH writedata CURLOPT_WRITEDATA writefunction CURLOPT_WRITEFUNCTION xoauth2_bearer CURLOPT_XOAUTH2_BEARER
CAINFO_BLOB CHUNK_BGN_FUNCTION CHUNK_DATA CHUNK_END_FUNCTION CLOSESOCKETDATA CLOSESOCKETFUNCTION CONV_FROM_NETWORK_FUNCTION CONV_FROM_UTF8_FUNCTION CONV_TO_NETWORK_FUNCTION CURLU DEBUGDATA DEBUGFUNCTION ERRORBUFFER FNMATCH_DATA FNMATCH_FUNCTION FTPSSLAUTH FTP_FILEMETHOD GSSAPI_DELEGATION HEADEROPT HSTSREADDATA HSTSREADFUNCTION HSTSWRITEDATA HSTSWRITEFUNCTION HTTPAUTH HTTPPOST HTTP_VERSION INTERLEAVEDATA INTERLEAVEFUNCTION IOCTLDATA IOCTLFUNCTION IPRESOLVE ISSUERCERT_BLOB MIMEPOST NETRC OPENSOCKETDATA OPENSOCKETFUNCTION POSTREDIR PREREQDATA PREREQFUNCTION PRIVATE PROGRESSFUNCTION PROXYAUTH PROXYTYPE PROXY_CAINFO_BLOB PROXY_ISSUERCERT_BLOB PROXY_SSLCERT_BLOB PROXY_SSLKEY_BLOB PROXY_SSLVERSION RESOLVER_START_DATA RESOLVER_START_FUNCTION RTSP_REQUEST SEEKDATA SEEKFUNCTION SHARE SOCKOPTDATA SOCKOPTFUNCTION SSH_AUTH_TYPES SSH_HOSTKEYDATA SSH_HOSTKEYFUNCTION SSH_KEYDATA SSH_KEYFUNCTION SSLCERT_BLOB SSLKEY_BLOB SSLVERSION SSL_CTX_DATA SSL_CTX_FUNCTION SSL_OPTIONS STDERR STREAM_DEPENDS STREAM_DEPENDS_E TIMECONDITION TRAILERDATA TRAILERFUNCTION USE_SSL XFERINFODATA XFERINFOFUNCTION

=end stopwords

=head2 abstract_unix_socket

 $curl->setopt( abstract_unix_socket => $value );

( L<CURLOPT_ABSTRACT_UNIX_SOCKET|https://curl.se/libcurl/c/CURLOPT_ABSTRACT_UNIX_SOCKET.html> )

=head2 accept_encoding

 $curl->setopt( accept_encoding => $value );

( L<CURLOPT_ACCEPT_ENCODING|https://curl.se/libcurl/c/CURLOPT_ACCEPT_ENCODING.html> )

=head2 accepttimeout_ms

 $curl->setopt( accepttimeout_ms => $value );

( L<CURLOPT_ACCEPTTIMEOUT_MS|https://curl.se/libcurl/c/CURLOPT_ACCEPTTIMEOUT_MS.html> )

=head2 address_scope

 $curl->setopt( address_scope => $value );

( L<CURLOPT_ADDRESS_SCOPE|https://curl.se/libcurl/c/CURLOPT_ADDRESS_SCOPE.html> )

=head2 altsvc

 $curl->setopt( altsvc => $value );

( L<CURLOPT_ALTSVC|https://curl.se/libcurl/c/CURLOPT_ALTSVC.html> )

=head2 altsvc_ctrl

 $curl->setopt( altsvc_ctrl => $value );

( L<CURLOPT_ALTSVC_CTRL|https://curl.se/libcurl/c/CURLOPT_ALTSVC_CTRL.html> )

=head2 append

 $curl->setopt( append => $value );

( L<CURLOPT_APPEND|https://curl.se/libcurl/c/CURLOPT_APPEND.html> )

=head2 autoreferer

 $curl->setopt( autoreferer => $value );

( L<CURLOPT_AUTOREFERER|https://curl.se/libcurl/c/CURLOPT_AUTOREFERER.html> )

=head2 aws_sigv4

 $curl->setopt( aws_sigv4 => $value );

( L<CURLOPT_AWS_SIGV4|https://curl.se/libcurl/c/CURLOPT_AWS_SIGV4.html> )

=head2 buffersize

 $curl->setopt( buffersize => $value );

( L<CURLOPT_BUFFERSIZE|https://curl.se/libcurl/c/CURLOPT_BUFFERSIZE.html> )

=head2 cainfo

 $curl->setopt( cainfo => $value );

( L<CURLOPT_CAINFO|https://curl.se/libcurl/c/CURLOPT_CAINFO.html> )

=head2 capath

 $curl->setopt( capath => $value );

( L<CURLOPT_CAPATH|https://curl.se/libcurl/c/CURLOPT_CAPATH.html> )

=head2 certinfo

 $curl->setopt( certinfo => $value );

( L<CURLOPT_CERTINFO|https://curl.se/libcurl/c/CURLOPT_CERTINFO.html> )

=head2 connect_only

 $curl->setopt( connect_only => 1 );

Perform all the required proxy authentication and connection setup, but no data
transfer, and then return.  This is usually used in combination with
L<activesocket|Net::Swirl::CurlEasy/activesocket>.

This can be set to C<2> and if HTTP or WebSocket are used the request will be
done, along with all response headers before handing over control to you.

Transfers marked connect only will not reuse any existing connections and
connections marked connect only will not be allowed to get reused.

( L<CURLOPT_CONNECT_ONLY|https://curl.se/libcurl/c/CURLOPT_CONNECT_ONLY.html> )

=head2 connect_to

 $curl->setopt( connect_to => $value );

( L<CURLOPT_CONNECT_TO|https://curl.se/libcurl/c/CURLOPT_CONNECT_TO.html> )

=head2 connecttimeout

 $curl->setopt( connecttimeout => $value );

( L<CURLOPT_CONNECTTIMEOUT|https://curl.se/libcurl/c/CURLOPT_CONNECTTIMEOUT.html> )

=head2 connecttimeout_ms

 $curl->setopt( connecttimeout_ms => $value );

( L<CURLOPT_CONNECTTIMEOUT_MS|https://curl.se/libcurl/c/CURLOPT_CONNECTTIMEOUT_MS.html> )

=head2 cookie

 $curl->setopt( cookie => $value );

( L<CURLOPT_COOKIE|https://curl.se/libcurl/c/CURLOPT_COOKIE.html> )

=head2 cookiefile

 $curl->setopt( cookiefile => $value );

( L<CURLOPT_COOKIEFILE|https://curl.se/libcurl/c/CURLOPT_COOKIEFILE.html> )

=head2 cookiejar

 $curl->setopt( cookiejar => $value );

( L<CURLOPT_COOKIEJAR|https://curl.se/libcurl/c/CURLOPT_COOKIEJAR.html> )

=head2 cookielist

 $curl->setopt( cookielist => $value );

( L<CURLOPT_COOKIELIST|https://curl.se/libcurl/c/CURLOPT_COOKIELIST.html> )

=head2 cookiesession

 $curl->setopt( cookiesession => $value );

( L<CURLOPT_COOKIESESSION|https://curl.se/libcurl/c/CURLOPT_COOKIESESSION.html> )

=head2 copypostfields

 $curl->setopt( copypostfields => $value );

( L<CURLOPT_COPYPOSTFIELDS|https://curl.se/libcurl/c/CURLOPT_COPYPOSTFIELDS.html> )

=head2 crlf

 $curl->setopt( crlf => $value );

( L<CURLOPT_CRLF|https://curl.se/libcurl/c/CURLOPT_CRLF.html> )

=head2 crlfile

 $curl->setopt( crlfile => $value );

( L<CURLOPT_CRLFILE|https://curl.se/libcurl/c/CURLOPT_CRLFILE.html> )

=head2 customrequest

 $curl->setopt( customrequest => $value );

( L<CURLOPT_CUSTOMREQUEST|https://curl.se/libcurl/c/CURLOPT_CUSTOMREQUEST.html> )

=head2 default_protocol

 $curl->setopt( default_protocol => $value );

( L<CURLOPT_DEFAULT_PROTOCOL|https://curl.se/libcurl/c/CURLOPT_DEFAULT_PROTOCOL.html> )

=head2 dirlistonly

 $curl->setopt( dirlistonly => $value );

( L<CURLOPT_DIRLISTONLY|https://curl.se/libcurl/c/CURLOPT_DIRLISTONLY.html> )

=head2 disallow_username_in_url

 $curl->setopt( disallow_username_in_url => $value );

( L<CURLOPT_DISALLOW_USERNAME_IN_URL|https://curl.se/libcurl/c/CURLOPT_DISALLOW_USERNAME_IN_URL.html> )

=head2 dns_cache_timeout

 $curl->setopt( dns_cache_timeout => $value );

( L<CURLOPT_DNS_CACHE_TIMEOUT|https://curl.se/libcurl/c/CURLOPT_DNS_CACHE_TIMEOUT.html> )

=head2 dns_interface

 $curl->setopt( dns_interface => $value );

( L<CURLOPT_DNS_INTERFACE|https://curl.se/libcurl/c/CURLOPT_DNS_INTERFACE.html> )

=head2 dns_local_ip4

 $curl->setopt( dns_local_ip4 => $value );

( L<CURLOPT_DNS_LOCAL_IP4|https://curl.se/libcurl/c/CURLOPT_DNS_LOCAL_IP4.html> )

=head2 dns_local_ip6

 $curl->setopt( dns_local_ip6 => $value );

( L<CURLOPT_DNS_LOCAL_IP6|https://curl.se/libcurl/c/CURLOPT_DNS_LOCAL_IP6.html> )

=head2 dns_servers

 $curl->setopt( dns_servers => $value );

( L<CURLOPT_DNS_SERVERS|https://curl.se/libcurl/c/CURLOPT_DNS_SERVERS.html> )

=head2 dns_shuffle_addresses

 $curl->setopt( dns_shuffle_addresses => $value );

( L<CURLOPT_DNS_SHUFFLE_ADDRESSES|https://curl.se/libcurl/c/CURLOPT_DNS_SHUFFLE_ADDRESSES.html> )

=head2 dns_use_global_cache

 $curl->setopt( dns_use_global_cache => $value );

( L<CURLOPT_DNS_USE_GLOBAL_CACHE|https://curl.se/libcurl/c/CURLOPT_DNS_USE_GLOBAL_CACHE.html> )

=head2 doh_ssl_verifyhost

 $curl->setopt( doh_ssl_verifyhost => $value );

( L<CURLOPT_DOH_SSL_VERIFYHOST|https://curl.se/libcurl/c/CURLOPT_DOH_SSL_VERIFYHOST.html> )

=head2 doh_ssl_verifypeer

 $curl->setopt( doh_ssl_verifypeer => $value );

( L<CURLOPT_DOH_SSL_VERIFYPEER|https://curl.se/libcurl/c/CURLOPT_DOH_SSL_VERIFYPEER.html> )

=head2 doh_ssl_verifystatus

 $curl->setopt( doh_ssl_verifystatus => $value );

( L<CURLOPT_DOH_SSL_VERIFYSTATUS|https://curl.se/libcurl/c/CURLOPT_DOH_SSL_VERIFYSTATUS.html> )

=head2 doh_url

 $curl->setopt( doh_url => $value );

( L<CURLOPT_DOH_URL|https://curl.se/libcurl/c/CURLOPT_DOH_URL.html> )

=head2 egdsocket

 $curl->setopt( egdsocket => $value );

( L<CURLOPT_EGDSOCKET|https://curl.se/libcurl/c/CURLOPT_EGDSOCKET.html> )

=head2 expect_100_timeout_ms

 $curl->setopt( expect_100_timeout_ms => $value );

( L<CURLOPT_EXPECT_100_TIMEOUT_MS|https://curl.se/libcurl/c/CURLOPT_EXPECT_100_TIMEOUT_MS.html> )

=head2 failonerror

 $curl->setopt( failonerror => $value );

( L<CURLOPT_FAILONERROR|https://curl.se/libcurl/c/CURLOPT_FAILONERROR.html> )

=head2 filetime

 $curl->setopt( filetime => $value );

( L<CURLOPT_FILETIME|https://curl.se/libcurl/c/CURLOPT_FILETIME.html> )

=head2 followlocation

 $curl->setopt( followlocation => $bool );

Set this to 1 (the default is 0) to follow redirect responses.
The maximum number of redirects can be controlled by
L<maxredirs|/maxredirs>.

( L<CURLOPT_FOLLOWLOCATION|https://curl.se/libcurl/c/CURLOPT_FOLLOWLOCATION.html> )

=head2 forbid_reuse

 $curl->setopt( forbid_reuse => $value );

( L<CURLOPT_FORBID_REUSE|https://curl.se/libcurl/c/CURLOPT_FORBID_REUSE.html> )

=head2 fresh_connect

 $curl->setopt( fresh_connect => $value );

( L<CURLOPT_FRESH_CONNECT|https://curl.se/libcurl/c/CURLOPT_FRESH_CONNECT.html> )

=head2 ftp_account

 $curl->setopt( ftp_account => $value );

( L<CURLOPT_FTP_ACCOUNT|https://curl.se/libcurl/c/CURLOPT_FTP_ACCOUNT.html> )

=head2 ftp_alternative_to_user

 $curl->setopt( ftp_alternative_to_user => $value );

( L<CURLOPT_FTP_ALTERNATIVE_TO_USER|https://curl.se/libcurl/c/CURLOPT_FTP_ALTERNATIVE_TO_USER.html> )

=head2 ftp_create_missing_dirs

 $curl->setopt( ftp_create_missing_dirs => $value );

( L<CURLOPT_FTP_CREATE_MISSING_DIRS|https://curl.se/libcurl/c/CURLOPT_FTP_CREATE_MISSING_DIRS.html> )

=head2 ftp_skip_pasv_ip

 $curl->setopt( ftp_skip_pasv_ip => $value );

( L<CURLOPT_FTP_SKIP_PASV_IP|https://curl.se/libcurl/c/CURLOPT_FTP_SKIP_PASV_IP.html> )

=head2 ftp_ssl_ccc

 $curl->setopt( ftp_ssl_ccc => $value );

( L<CURLOPT_FTP_SSL_CCC|https://curl.se/libcurl/c/CURLOPT_FTP_SSL_CCC.html> )

=head2 ftp_use_eprt

 $curl->setopt( ftp_use_eprt => $value );

( L<CURLOPT_FTP_USE_EPRT|https://curl.se/libcurl/c/CURLOPT_FTP_USE_EPRT.html> )

=head2 ftp_use_epsv

 $curl->setopt( ftp_use_epsv => $value );

( L<CURLOPT_FTP_USE_EPSV|https://curl.se/libcurl/c/CURLOPT_FTP_USE_EPSV.html> )

=head2 ftp_use_pret

 $curl->setopt( ftp_use_pret => $value );

( L<CURLOPT_FTP_USE_PRET|https://curl.se/libcurl/c/CURLOPT_FTP_USE_PRET.html> )

=head2 ftpport

 $curl->setopt( ftpport => $value );

( L<CURLOPT_FTPPORT|https://curl.se/libcurl/c/CURLOPT_FTPPORT.html> )

=head2 happy_eyeballs_timeout_ms

 $curl->setopt( happy_eyeballs_timeout_ms => $value );

( L<CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS|https://curl.se/libcurl/c/CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS.html> )

=head2 haproxyprotocol

 $curl->setopt( haproxyprotocol => $value );

( L<CURLOPT_HAPROXYPROTOCOL|https://curl.se/libcurl/c/CURLOPT_HAPROXYPROTOCOL.html> )

=head2 header

 $curl->setopt( header => $value );

( L<CURLOPT_HEADER|https://curl.se/libcurl/c/CURLOPT_HEADER.html> )

=head2 headerdata

 $curl->setopt( headerdata => $headerdata);

This option sets the value of C<$headerdata> that is passed into the callback of
the L<headerfunction option|/headerfunction>.

If the L<headerfunction option|/headerfunction> is not set or set to C<undef>
and this option is set to a true value, then the header data will be written
instead to the L<writefunction callback|/writefunction>.

( L<CURLOPT_HEADERDATA|https://curl.se/libcurl/c/CURLOPT_HEADERDATA.html> )

=head2 headerfunction

 $curl->setopt( headerfunction => sub ($curl, $content, $headerdata) {
   ...
 });

This callback is called as each header is received.  The L<headerdata option|/headerdata>
is used to set C<$headerdata>.  For more details see the documentation for the
C API of this option:

( L<CURLOPT_HEADERFUNCTION|https://curl.se/libcurl/c/CURLOPT_HEADERFUNCTION.html> )

=head2 hsts

 $curl->setopt( hsts => $value );

( L<CURLOPT_HSTS|https://curl.se/libcurl/c/CURLOPT_HSTS.html> )

=head2 hsts_ctrl

 $curl->setopt( hsts_ctrl => $value );

( L<CURLOPT_HSTS_CTRL|https://curl.se/libcurl/c/CURLOPT_HSTS_CTRL.html> )

=head2 http09_allowed

 $curl->setopt( http09_allowed => $value );

( L<CURLOPT_HTTP09_ALLOWED|https://curl.se/libcurl/c/CURLOPT_HTTP09_ALLOWED.html> )

=head2 http200aliases

 $curl->setopt( http200aliases => $value );

( L<CURLOPT_HTTP200ALIASES|https://curl.se/libcurl/c/CURLOPT_HTTP200ALIASES.html> )

=head2 http_content_decoding

 $curl->setopt( http_content_decoding => $value );

( L<CURLOPT_HTTP_CONTENT_DECODING|https://curl.se/libcurl/c/CURLOPT_HTTP_CONTENT_DECODING.html> )

=head2 http_transfer_decoding

 $curl->setopt( http_transfer_decoding => $value );

( L<CURLOPT_HTTP_TRANSFER_DECODING|https://curl.se/libcurl/c/CURLOPT_HTTP_TRANSFER_DECODING.html> )

=head2 httpget

 $curl->setopt( httpget => $value );

( L<CURLOPT_HTTPGET|https://curl.se/libcurl/c/CURLOPT_HTTPGET.html> )

=head2 httpheader

 $curl->setopt( httpheader => $value );

( L<CURLOPT_HTTPHEADER|https://curl.se/libcurl/c/CURLOPT_HTTPHEADER.html> )

=head2 httpproxytunnel

 $curl->setopt( httpproxytunnel => $value );

( L<CURLOPT_HTTPPROXYTUNNEL|https://curl.se/libcurl/c/CURLOPT_HTTPPROXYTUNNEL.html> )

=head2 ignore_content_length

 $curl->setopt( ignore_content_length => $value );

( L<CURLOPT_IGNORE_CONTENT_LENGTH|https://curl.se/libcurl/c/CURLOPT_IGNORE_CONTENT_LENGTH.html> )

=head2 infilesize

 $curl->setopt( infilesize => $value );

( L<CURLOPT_INFILESIZE|https://curl.se/libcurl/c/CURLOPT_INFILESIZE.html> )

=head2 infilesize_large

 $curl->setopt( infilesize_large => $value );

( L<CURLOPT_INFILESIZE_LARGE|https://curl.se/libcurl/c/CURLOPT_INFILESIZE_LARGE.html> )

=head2 interface

 $curl->setopt( interface => $value );

( L<CURLOPT_INTERFACE|https://curl.se/libcurl/c/CURLOPT_INTERFACE.html> )

=head2 issuercert

 $curl->setopt( issuercert => $value );

( L<CURLOPT_ISSUERCERT|https://curl.se/libcurl/c/CURLOPT_ISSUERCERT.html> )

=head2 keep_sending_on_error

 $curl->setopt( keep_sending_on_error => $value );

( L<CURLOPT_KEEP_SENDING_ON_ERROR|https://curl.se/libcurl/c/CURLOPT_KEEP_SENDING_ON_ERROR.html> )

=head2 keypasswd

 $curl->setopt( keypasswd => $value );

( L<CURLOPT_KEYPASSWD|https://curl.se/libcurl/c/CURLOPT_KEYPASSWD.html> )

=head2 krblevel

 $curl->setopt( krblevel => $value );

( L<CURLOPT_KRBLEVEL|https://curl.se/libcurl/c/CURLOPT_KRBLEVEL.html> )

=head2 localport

 $curl->setopt( localport => $value );

( L<CURLOPT_LOCALPORT|https://curl.se/libcurl/c/CURLOPT_LOCALPORT.html> )

=head2 localportrange

 $curl->setopt( localportrange => $value );

( L<CURLOPT_LOCALPORTRANGE|https://curl.se/libcurl/c/CURLOPT_LOCALPORTRANGE.html> )

=head2 login_options

 $curl->setopt( login_options => $value );

( L<CURLOPT_LOGIN_OPTIONS|https://curl.se/libcurl/c/CURLOPT_LOGIN_OPTIONS.html> )

=head2 low_speed_limit

 $curl->setopt( low_speed_limit => $value );

( L<CURLOPT_LOW_SPEED_LIMIT|https://curl.se/libcurl/c/CURLOPT_LOW_SPEED_LIMIT.html> )

=head2 low_speed_time

 $curl->setopt( low_speed_time => $value );

( L<CURLOPT_LOW_SPEED_TIME|https://curl.se/libcurl/c/CURLOPT_LOW_SPEED_TIME.html> )

=head2 mail_auth

 $curl->setopt( mail_auth => $value );

( L<CURLOPT_MAIL_AUTH|https://curl.se/libcurl/c/CURLOPT_MAIL_AUTH.html> )

=head2 mail_from

 $curl->setopt( mail_from => $value );

( L<CURLOPT_MAIL_FROM|https://curl.se/libcurl/c/CURLOPT_MAIL_FROM.html> )

=head2 mail_rcpt

 $curl->setopt( mail_rcpt => $value );

( L<CURLOPT_MAIL_RCPT|https://curl.se/libcurl/c/CURLOPT_MAIL_RCPT.html> )

=head2 mail_rcpt_alllowfails

 $curl->setopt( mail_rcpt_alllowfails => $value );

( L<CURLOPT_MAIL_RCPT_ALLLOWFAILS|https://curl.se/libcurl/c/CURLOPT_MAIL_RCPT_ALLLOWFAILS.html> )

=head2 max_recv_speed_large

 $curl->setopt( max_recv_speed_large => $value );

( L<CURLOPT_MAX_RECV_SPEED_LARGE|https://curl.se/libcurl/c/CURLOPT_MAX_RECV_SPEED_LARGE.html> )

=head2 max_send_speed_large

 $curl->setopt( max_send_speed_large => $value );

( L<CURLOPT_MAX_SEND_SPEED_LARGE|https://curl.se/libcurl/c/CURLOPT_MAX_SEND_SPEED_LARGE.html> )

=head2 maxage_conn

 $curl->setopt( maxage_conn => $value );

( L<CURLOPT_MAXAGE_CONN|https://curl.se/libcurl/c/CURLOPT_MAXAGE_CONN.html> )

=head2 maxconnects

 $curl->setopt( maxconnects => $value );

( L<CURLOPT_MAXCONNECTS|https://curl.se/libcurl/c/CURLOPT_MAXCONNECTS.html> )

=head2 maxfilesize

 $curl->setopt( maxfilesize => $value );

( L<CURLOPT_MAXFILESIZE|https://curl.se/libcurl/c/CURLOPT_MAXFILESIZE.html> )

=head2 maxfilesize_large

 $curl->setopt( maxfilesize_large => $value );

( L<CURLOPT_MAXFILESIZE_LARGE|https://curl.se/libcurl/c/CURLOPT_MAXFILESIZE_LARGE.html> )

=head2 maxlifetime_conn

 $curl->setopt( maxlifetime_conn => $value );

( L<CURLOPT_MAXLIFETIME_CONN|https://curl.se/libcurl/c/CURLOPT_MAXLIFETIME_CONN.html> )

=head2 maxredirs

 $curl->setopt( maxredirs => $max );

Sets the maximum number of redirects.  Setting the limit to C<0> will force
L<Net::Swirl::CurlEasy> refuse any redirect.  Set to C<-1> for an infinite
number of redirects.

( L<CURLOPT_MAXREDIRS|https://curl.se/libcurl/c/CURLOPT_MAXREDIRS.html> )

=head2 mime_options

 $curl->setopt( mime_options => $value );

( L<CURLOPT_MIME_OPTIONS|https://curl.se/libcurl/c/CURLOPT_MIME_OPTIONS.html> )

=head2 netrc_file

 $curl->setopt( netrc_file => $value );

( L<CURLOPT_NETRC_FILE|https://curl.se/libcurl/c/CURLOPT_NETRC_FILE.html> )

=head2 new_directory_perms

 $curl->setopt( new_directory_perms => $value );

( L<CURLOPT_NEW_DIRECTORY_PERMS|https://curl.se/libcurl/c/CURLOPT_NEW_DIRECTORY_PERMS.html> )

=head2 new_file_perms

 $curl->setopt( new_file_perms => $value );

( L<CURLOPT_NEW_FILE_PERMS|https://curl.se/libcurl/c/CURLOPT_NEW_FILE_PERMS.html> )

=head2 nobody

 $curl->setopt( nobody => $value );

( L<CURLOPT_NOBODY|https://curl.se/libcurl/c/CURLOPT_NOBODY.html> )

=head2 noprogress

 $curl->setopt( noprogress => $value );

( L<CURLOPT_NOPROGRESS|https://curl.se/libcurl/c/CURLOPT_NOPROGRESS.html> )

=head2 noproxy

 $curl->setopt( noproxy => $value );

( L<CURLOPT_NOPROXY|https://curl.se/libcurl/c/CURLOPT_NOPROXY.html> )

=head2 nosignal

 $curl->setopt( nosignal => $value );

( L<CURLOPT_NOSIGNAL|https://curl.se/libcurl/c/CURLOPT_NOSIGNAL.html> )

=head2 password

 $curl->setopt( password => $value );

( L<CURLOPT_PASSWORD|https://curl.se/libcurl/c/CURLOPT_PASSWORD.html> )

=head2 path_as_is

 $curl->setopt( path_as_is => $value );

( L<CURLOPT_PATH_AS_IS|https://curl.se/libcurl/c/CURLOPT_PATH_AS_IS.html> )

=head2 pinnedpublickey

 $curl->setopt( pinnedpublickey => $value );

( L<CURLOPT_PINNEDPUBLICKEY|https://curl.se/libcurl/c/CURLOPT_PINNEDPUBLICKEY.html> )

=head2 pipewait

 $curl->setopt( pipewait => $value );

( L<CURLOPT_PIPEWAIT|https://curl.se/libcurl/c/CURLOPT_PIPEWAIT.html> )

=head2 port

 $curl->setopt( port => $value );

( L<CURLOPT_PORT|https://curl.se/libcurl/c/CURLOPT_PORT.html> )

=head2 post

 $curl->setopt( post => $value );

( L<CURLOPT_POST|https://curl.se/libcurl/c/CURLOPT_POST.html> )

=head2 postfields

 $curl->setopt( postfields => $value );

( L<CURLOPT_POSTFIELDS|https://curl.se/libcurl/c/CURLOPT_POSTFIELDS.html> )

=head2 postfieldsize

 $curl->setopt( postfieldsize => $value );

( L<CURLOPT_POSTFIELDSIZE|https://curl.se/libcurl/c/CURLOPT_POSTFIELDSIZE.html> )

=head2 postfieldsize_large

 $curl->setopt( postfieldsize_large => $value );

( L<CURLOPT_POSTFIELDSIZE_LARGE|https://curl.se/libcurl/c/CURLOPT_POSTFIELDSIZE_LARGE.html> )

=head2 postquote

 $curl->setopt( postquote => $value );

( L<CURLOPT_POSTQUOTE|https://curl.se/libcurl/c/CURLOPT_POSTQUOTE.html> )

=head2 pre_proxy

 $curl->setopt( pre_proxy => $value );

( L<CURLOPT_PRE_PROXY|https://curl.se/libcurl/c/CURLOPT_PRE_PROXY.html> )

=head2 prequote

 $curl->setopt( prequote => $value );

( L<CURLOPT_PREQUOTE|https://curl.se/libcurl/c/CURLOPT_PREQUOTE.html> )

=head2 protocols

 $curl->setopt( protocols => $value );

( L<CURLOPT_PROTOCOLS|https://curl.se/libcurl/c/CURLOPT_PROTOCOLS.html> )

=head2 protocols_str

 $curl->setopt( protocols_str => $value );

( L<CURLOPT_PROTOCOLS_STR|https://curl.se/libcurl/c/CURLOPT_PROTOCOLS_STR.html> )

=head2 proxy

 $curl->setopt( proxy => $value );

( L<CURLOPT_PROXY|https://curl.se/libcurl/c/CURLOPT_PROXY.html> )

=head2 proxy_cainfo

 $curl->setopt( proxy_cainfo => $value );

( L<CURLOPT_PROXY_CAINFO|https://curl.se/libcurl/c/CURLOPT_PROXY_CAINFO.html> )

=head2 proxy_capath

 $curl->setopt( proxy_capath => $value );

( L<CURLOPT_PROXY_CAPATH|https://curl.se/libcurl/c/CURLOPT_PROXY_CAPATH.html> )

=head2 proxy_crlfile

 $curl->setopt( proxy_crlfile => $value );

( L<CURLOPT_PROXY_CRLFILE|https://curl.se/libcurl/c/CURLOPT_PROXY_CRLFILE.html> )

=head2 proxy_issuercert

 $curl->setopt( proxy_issuercert => $value );

( L<CURLOPT_PROXY_ISSUERCERT|https://curl.se/libcurl/c/CURLOPT_PROXY_ISSUERCERT.html> )

=head2 proxy_keypasswd

 $curl->setopt( proxy_keypasswd => $value );

( L<CURLOPT_PROXY_KEYPASSWD|https://curl.se/libcurl/c/CURLOPT_PROXY_KEYPASSWD.html> )

=head2 proxy_pinnedpublickey

 $curl->setopt( proxy_pinnedpublickey => $value );

( L<CURLOPT_PROXY_PINNEDPUBLICKEY|https://curl.se/libcurl/c/CURLOPT_PROXY_PINNEDPUBLICKEY.html> )

=head2 proxy_service_name

 $curl->setopt( proxy_service_name => $value );

( L<CURLOPT_PROXY_SERVICE_NAME|https://curl.se/libcurl/c/CURLOPT_PROXY_SERVICE_NAME.html> )

=head2 proxy_ssl_cipher_list

 $curl->setopt( proxy_ssl_cipher_list => $value );

( L<CURLOPT_PROXY_SSL_CIPHER_LIST|https://curl.se/libcurl/c/CURLOPT_PROXY_SSL_CIPHER_LIST.html> )

=head2 proxy_ssl_options

 $curl->setopt( proxy_ssl_options => $value );

( L<CURLOPT_PROXY_SSL_OPTIONS|https://curl.se/libcurl/c/CURLOPT_PROXY_SSL_OPTIONS.html> )

=head2 proxy_ssl_verifyhost

 $curl->setopt( proxy_ssl_verifyhost => $value );

( L<CURLOPT_PROXY_SSL_VERIFYHOST|https://curl.se/libcurl/c/CURLOPT_PROXY_SSL_VERIFYHOST.html> )

=head2 proxy_ssl_verifypeer

 $curl->setopt( proxy_ssl_verifypeer => $value );

( L<CURLOPT_PROXY_SSL_VERIFYPEER|https://curl.se/libcurl/c/CURLOPT_PROXY_SSL_VERIFYPEER.html> )

=head2 proxy_sslcert

 $curl->setopt( proxy_sslcert => $value );

( L<CURLOPT_PROXY_SSLCERT|https://curl.se/libcurl/c/CURLOPT_PROXY_SSLCERT.html> )

=head2 proxy_sslcerttype

 $curl->setopt( proxy_sslcerttype => $value );

( L<CURLOPT_PROXY_SSLCERTTYPE|https://curl.se/libcurl/c/CURLOPT_PROXY_SSLCERTTYPE.html> )

=head2 proxy_sslkey

 $curl->setopt( proxy_sslkey => $value );

( L<CURLOPT_PROXY_SSLKEY|https://curl.se/libcurl/c/CURLOPT_PROXY_SSLKEY.html> )

=head2 proxy_sslkeytype

 $curl->setopt( proxy_sslkeytype => $value );

( L<CURLOPT_PROXY_SSLKEYTYPE|https://curl.se/libcurl/c/CURLOPT_PROXY_SSLKEYTYPE.html> )

=head2 proxy_tls13_ciphers

 $curl->setopt( proxy_tls13_ciphers => $value );

( L<CURLOPT_PROXY_TLS13_CIPHERS|https://curl.se/libcurl/c/CURLOPT_PROXY_TLS13_CIPHERS.html> )

=head2 proxy_tlsauth_password

 $curl->setopt( proxy_tlsauth_password => $value );

( L<CURLOPT_PROXY_TLSAUTH_PASSWORD|https://curl.se/libcurl/c/CURLOPT_PROXY_TLSAUTH_PASSWORD.html> )

=head2 proxy_tlsauth_type

 $curl->setopt( proxy_tlsauth_type => $value );

( L<CURLOPT_PROXY_TLSAUTH_TYPE|https://curl.se/libcurl/c/CURLOPT_PROXY_TLSAUTH_TYPE.html> )

=head2 proxy_tlsauth_username

 $curl->setopt( proxy_tlsauth_username => $value );

( L<CURLOPT_PROXY_TLSAUTH_USERNAME|https://curl.se/libcurl/c/CURLOPT_PROXY_TLSAUTH_USERNAME.html> )

=head2 proxy_transfer_mode

 $curl->setopt( proxy_transfer_mode => $value );

( L<CURLOPT_PROXY_TRANSFER_MODE|https://curl.se/libcurl/c/CURLOPT_PROXY_TRANSFER_MODE.html> )

=head2 proxyheader

 $curl->setopt( proxyheader => $value );

( L<CURLOPT_PROXYHEADER|https://curl.se/libcurl/c/CURLOPT_PROXYHEADER.html> )

=head2 proxypassword

 $curl->setopt( proxypassword => $value );

( L<CURLOPT_PROXYPASSWORD|https://curl.se/libcurl/c/CURLOPT_PROXYPASSWORD.html> )

=head2 proxyport

 $curl->setopt( proxyport => $value );

( L<CURLOPT_PROXYPORT|https://curl.se/libcurl/c/CURLOPT_PROXYPORT.html> )

=head2 proxyusername

 $curl->setopt( proxyusername => $value );

( L<CURLOPT_PROXYUSERNAME|https://curl.se/libcurl/c/CURLOPT_PROXYUSERNAME.html> )

=head2 proxyuserpwd

 $curl->setopt( proxyuserpwd => $value );

( L<CURLOPT_PROXYUSERPWD|https://curl.se/libcurl/c/CURLOPT_PROXYUSERPWD.html> )

=head2 put

 $curl->setopt( put => $value );

( L<CURLOPT_PUT|https://curl.se/libcurl/c/CURLOPT_PUT.html> )

=head2 quote

 $curl->setopt( quote => $value );

( L<CURLOPT_QUOTE|https://curl.se/libcurl/c/CURLOPT_QUOTE.html> )

=head2 random_file

 $curl->setopt( random_file => $value );

( L<CURLOPT_RANDOM_FILE|https://curl.se/libcurl/c/CURLOPT_RANDOM_FILE.html> )

=head2 range

 $curl->setopt( range => $value );

( L<CURLOPT_RANGE|https://curl.se/libcurl/c/CURLOPT_RANGE.html> )

=head2 readdata

 $curl->setopt( readdata => $value );

( L<CURLOPT_READDATA|https://curl.se/libcurl/c/CURLOPT_READDATA.html> )

=head2 readfunction

 $curl->setopt( readfunction => $value );

( L<CURLOPT_READFUNCTION|https://curl.se/libcurl/c/CURLOPT_READFUNCTION.html> )

=head2 redir_protocols

 $curl->setopt( redir_protocols => $value );

( L<CURLOPT_REDIR_PROTOCOLS|https://curl.se/libcurl/c/CURLOPT_REDIR_PROTOCOLS.html> )

=head2 redir_protocols_str

 $curl->setopt( redir_protocols_str => $value );

( L<CURLOPT_REDIR_PROTOCOLS_STR|https://curl.se/libcurl/c/CURLOPT_REDIR_PROTOCOLS_STR.html> )

=head2 referer

 $curl->setopt( referer => $value );

( L<CURLOPT_REFERER|https://curl.se/libcurl/c/CURLOPT_REFERER.html> )

=head2 request_target

 $curl->setopt( request_target => $value );

( L<CURLOPT_REQUEST_TARGET|https://curl.se/libcurl/c/CURLOPT_REQUEST_TARGET.html> )

=head2 resolve

 $curl->setopt( resolve => $value );

( L<CURLOPT_RESOLVE|https://curl.se/libcurl/c/CURLOPT_RESOLVE.html> )

=head2 resume_from

 $curl->setopt( resume_from => $value );

( L<CURLOPT_RESUME_FROM|https://curl.se/libcurl/c/CURLOPT_RESUME_FROM.html> )

=head2 resume_from_large

 $curl->setopt( resume_from_large => $value );

( L<CURLOPT_RESUME_FROM_LARGE|https://curl.se/libcurl/c/CURLOPT_RESUME_FROM_LARGE.html> )

=head2 rtsp_client_cseq

 $curl->setopt( rtsp_client_cseq => $value );

( L<CURLOPT_RTSP_CLIENT_CSEQ|https://curl.se/libcurl/c/CURLOPT_RTSP_CLIENT_CSEQ.html> )

=head2 rtsp_server_cseq

 $curl->setopt( rtsp_server_cseq => $value );

( L<CURLOPT_RTSP_SERVER_CSEQ|https://curl.se/libcurl/c/CURLOPT_RTSP_SERVER_CSEQ.html> )

=head2 rtsp_session_id

 $curl->setopt( rtsp_session_id => $value );

( L<CURLOPT_RTSP_SESSION_ID|https://curl.se/libcurl/c/CURLOPT_RTSP_SESSION_ID.html> )

=head2 rtsp_stream_uri

 $curl->setopt( rtsp_stream_uri => $value );

( L<CURLOPT_RTSP_STREAM_URI|https://curl.se/libcurl/c/CURLOPT_RTSP_STREAM_URI.html> )

=head2 rtsp_transport

 $curl->setopt( rtsp_transport => $value );

( L<CURLOPT_RTSP_TRANSPORT|https://curl.se/libcurl/c/CURLOPT_RTSP_TRANSPORT.html> )

=head2 sasl_authzid

 $curl->setopt( sasl_authzid => $value );

( L<CURLOPT_SASL_AUTHZID|https://curl.se/libcurl/c/CURLOPT_SASL_AUTHZID.html> )

=head2 sasl_ir

 $curl->setopt( sasl_ir => $value );

( L<CURLOPT_SASL_IR|https://curl.se/libcurl/c/CURLOPT_SASL_IR.html> )

=head2 server_response_timeout

 $curl->setopt( server_response_timeout => $value );

( L<CURLOPT_SERVER_RESPONSE_TIMEOUT|https://curl.se/libcurl/c/CURLOPT_SERVER_RESPONSE_TIMEOUT.html> )

=head2 service_name

 $curl->setopt( service_name => $value );

( L<CURLOPT_SERVICE_NAME|https://curl.se/libcurl/c/CURLOPT_SERVICE_NAME.html> )

=head2 socks5_auth

 $curl->setopt( socks5_auth => $value );

( L<CURLOPT_SOCKS5_AUTH|https://curl.se/libcurl/c/CURLOPT_SOCKS5_AUTH.html> )

=head2 socks5_gssapi_nec

 $curl->setopt( socks5_gssapi_nec => $value );

( L<CURLOPT_SOCKS5_GSSAPI_NEC|https://curl.se/libcurl/c/CURLOPT_SOCKS5_GSSAPI_NEC.html> )

=head2 socks5_gssapi_service

 $curl->setopt( socks5_gssapi_service => $value );

( L<CURLOPT_SOCKS5_GSSAPI_SERVICE|https://curl.se/libcurl/c/CURLOPT_SOCKS5_GSSAPI_SERVICE.html> )

=head2 ssh_compression

 $curl->setopt( ssh_compression => $value );

( L<CURLOPT_SSH_COMPRESSION|https://curl.se/libcurl/c/CURLOPT_SSH_COMPRESSION.html> )

=head2 ssh_host_public_key_md5

 $curl->setopt( ssh_host_public_key_md5 => $value );

( L<CURLOPT_SSH_HOST_PUBLIC_KEY_MD5|https://curl.se/libcurl/c/CURLOPT_SSH_HOST_PUBLIC_KEY_MD5.html> )

=head2 ssh_host_public_key_sha256

 $curl->setopt( ssh_host_public_key_sha256 => $value );

( L<CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256|https://curl.se/libcurl/c/CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256.html> )

=head2 ssh_knownhosts

 $curl->setopt( ssh_knownhosts => $value );

( L<CURLOPT_SSH_KNOWNHOSTS|https://curl.se/libcurl/c/CURLOPT_SSH_KNOWNHOSTS.html> )

=head2 ssh_private_keyfile

 $curl->setopt( ssh_private_keyfile => $value );

( L<CURLOPT_SSH_PRIVATE_KEYFILE|https://curl.se/libcurl/c/CURLOPT_SSH_PRIVATE_KEYFILE.html> )

=head2 ssh_public_keyfile

 $curl->setopt( ssh_public_keyfile => $value );

( L<CURLOPT_SSH_PUBLIC_KEYFILE|https://curl.se/libcurl/c/CURLOPT_SSH_PUBLIC_KEYFILE.html> )

=head2 ssl_cipher_list

 $curl->setopt( ssl_cipher_list => $value );

( L<CURLOPT_SSL_CIPHER_LIST|https://curl.se/libcurl/c/CURLOPT_SSL_CIPHER_LIST.html> )

=head2 ssl_ec_curves

 $curl->setopt( ssl_ec_curves => $value );

( L<CURLOPT_SSL_EC_CURVES|https://curl.se/libcurl/c/CURLOPT_SSL_EC_CURVES.html> )

=head2 ssl_enable_alpn

 $curl->setopt( ssl_enable_alpn => $value );

( L<CURLOPT_SSL_ENABLE_ALPN|https://curl.se/libcurl/c/CURLOPT_SSL_ENABLE_ALPN.html> )

=head2 ssl_enable_npn

 $curl->setopt( ssl_enable_npn => $value );

( L<CURLOPT_SSL_ENABLE_NPN|https://curl.se/libcurl/c/CURLOPT_SSL_ENABLE_NPN.html> )

=head2 ssl_falsestart

 $curl->setopt( ssl_falsestart => $value );

( L<CURLOPT_SSL_FALSESTART|https://curl.se/libcurl/c/CURLOPT_SSL_FALSESTART.html> )

=head2 ssl_sessionid_cache

 $curl->setopt( ssl_sessionid_cache => $value );

( L<CURLOPT_SSL_SESSIONID_CACHE|https://curl.se/libcurl/c/CURLOPT_SSL_SESSIONID_CACHE.html> )

=head2 ssl_verifyhost

 $curl->setopt( ssl_verifyhost => $value );

( L<CURLOPT_SSL_VERIFYHOST|https://curl.se/libcurl/c/CURLOPT_SSL_VERIFYHOST.html> )

=head2 ssl_verifypeer

 $curl->setopt( ssl_verifypeer => $value );

( L<CURLOPT_SSL_VERIFYPEER|https://curl.se/libcurl/c/CURLOPT_SSL_VERIFYPEER.html> )

=head2 ssl_verifystatus

 $curl->setopt( ssl_verifystatus => $value );

( L<CURLOPT_SSL_VERIFYSTATUS|https://curl.se/libcurl/c/CURLOPT_SSL_VERIFYSTATUS.html> )

=head2 sslcert

 $curl->setopt( sslcert => $value );

( L<CURLOPT_SSLCERT|https://curl.se/libcurl/c/CURLOPT_SSLCERT.html> )

=head2 sslcerttype

 $curl->setopt( sslcerttype => $value );

( L<CURLOPT_SSLCERTTYPE|https://curl.se/libcurl/c/CURLOPT_SSLCERTTYPE.html> )

=head2 sslengine

 $curl->setopt( sslengine => $value );

( L<CURLOPT_SSLENGINE|https://curl.se/libcurl/c/CURLOPT_SSLENGINE.html> )

=head2 sslengine_default

 $curl->setopt( sslengine_default => $value );

( L<CURLOPT_SSLENGINE_DEFAULT|https://curl.se/libcurl/c/CURLOPT_SSLENGINE_DEFAULT.html> )

=head2 sslkey

 $curl->setopt( sslkey => $value );

( L<CURLOPT_SSLKEY|https://curl.se/libcurl/c/CURLOPT_SSLKEY.html> )

=head2 sslkeytype

 $curl->setopt( sslkeytype => $value );

( L<CURLOPT_SSLKEYTYPE|https://curl.se/libcurl/c/CURLOPT_SSLKEYTYPE.html> )

=head2 stream_weight

 $curl->setopt( stream_weight => $value );

( L<CURLOPT_STREAM_WEIGHT|https://curl.se/libcurl/c/CURLOPT_STREAM_WEIGHT.html> )

=head2 suppress_connect_headers

 $curl->setopt( suppress_connect_headers => $value );

( L<CURLOPT_SUPPRESS_CONNECT_HEADERS|https://curl.se/libcurl/c/CURLOPT_SUPPRESS_CONNECT_HEADERS.html> )

=head2 tcp_fastopen

 $curl->setopt( tcp_fastopen => $value );

( L<CURLOPT_TCP_FASTOPEN|https://curl.se/libcurl/c/CURLOPT_TCP_FASTOPEN.html> )

=head2 tcp_keepalive

 $curl->setopt( tcp_keepalive => $value );

( L<CURLOPT_TCP_KEEPALIVE|https://curl.se/libcurl/c/CURLOPT_TCP_KEEPALIVE.html> )

=head2 tcp_keepidle

 $curl->setopt( tcp_keepidle => $value );

( L<CURLOPT_TCP_KEEPIDLE|https://curl.se/libcurl/c/CURLOPT_TCP_KEEPIDLE.html> )

=head2 tcp_keepintvl

 $curl->setopt( tcp_keepintvl => $value );

( L<CURLOPT_TCP_KEEPINTVL|https://curl.se/libcurl/c/CURLOPT_TCP_KEEPINTVL.html> )

=head2 tcp_nodelay

 $curl->setopt( tcp_nodelay => $value );

( L<CURLOPT_TCP_NODELAY|https://curl.se/libcurl/c/CURLOPT_TCP_NODELAY.html> )

=head2 telnetoptions

 $curl->setopt( telnetoptions => $value );

( L<CURLOPT_TELNETOPTIONS|https://curl.se/libcurl/c/CURLOPT_TELNETOPTIONS.html> )

=head2 tftp_blksize

 $curl->setopt( tftp_blksize => $value );

( L<CURLOPT_TFTP_BLKSIZE|https://curl.se/libcurl/c/CURLOPT_TFTP_BLKSIZE.html> )

=head2 tftp_no_options

 $curl->setopt( tftp_no_options => $value );

( L<CURLOPT_TFTP_NO_OPTIONS|https://curl.se/libcurl/c/CURLOPT_TFTP_NO_OPTIONS.html> )

=head2 timeout

 $curl->setopt( timeout => $value );

( L<CURLOPT_TIMEOUT|https://curl.se/libcurl/c/CURLOPT_TIMEOUT.html> )

=head2 timeout_ms

 $curl->setopt( timeout_ms => $value );

( L<CURLOPT_TIMEOUT_MS|https://curl.se/libcurl/c/CURLOPT_TIMEOUT_MS.html> )

=head2 timevalue

 $curl->setopt( timevalue => $value );

( L<CURLOPT_TIMEVALUE|https://curl.se/libcurl/c/CURLOPT_TIMEVALUE.html> )

=head2 timevalue_large

 $curl->setopt( timevalue_large => $value );

( L<CURLOPT_TIMEVALUE_LARGE|https://curl.se/libcurl/c/CURLOPT_TIMEVALUE_LARGE.html> )

=head2 tls13_ciphers

 $curl->setopt( tls13_ciphers => $value );

( L<CURLOPT_TLS13_CIPHERS|https://curl.se/libcurl/c/CURLOPT_TLS13_CIPHERS.html> )

=head2 tlsauth_password

 $curl->setopt( tlsauth_password => $value );

( L<CURLOPT_TLSAUTH_PASSWORD|https://curl.se/libcurl/c/CURLOPT_TLSAUTH_PASSWORD.html> )

=head2 tlsauth_type

 $curl->setopt( tlsauth_type => $value );

( L<CURLOPT_TLSAUTH_TYPE|https://curl.se/libcurl/c/CURLOPT_TLSAUTH_TYPE.html> )

=head2 tlsauth_username

 $curl->setopt( tlsauth_username => $value );

( L<CURLOPT_TLSAUTH_USERNAME|https://curl.se/libcurl/c/CURLOPT_TLSAUTH_USERNAME.html> )

=head2 transfer_encoding

 $curl->setopt( transfer_encoding => $value );

( L<CURLOPT_TRANSFER_ENCODING|https://curl.se/libcurl/c/CURLOPT_TRANSFER_ENCODING.html> )

=head2 transfertext

 $curl->setopt( transfertext => $value );

( L<CURLOPT_TRANSFERTEXT|https://curl.se/libcurl/c/CURLOPT_TRANSFERTEXT.html> )

=head2 unix_socket_path

 $curl->setopt( unix_socket_path => $value );

( L<CURLOPT_UNIX_SOCKET_PATH|https://curl.se/libcurl/c/CURLOPT_UNIX_SOCKET_PATH.html> )

=head2 unrestricted_auth

 $curl->setopt( unrestricted_auth => $value );

( L<CURLOPT_UNRESTRICTED_AUTH|https://curl.se/libcurl/c/CURLOPT_UNRESTRICTED_AUTH.html> )

=head2 upkeep_interval_ms

 $curl->setopt( upkeep_interval_ms => $value );

( L<CURLOPT_UPKEEP_INTERVAL_MS|https://curl.se/libcurl/c/CURLOPT_UPKEEP_INTERVAL_MS.html> )

=head2 upload

 $curl->setopt( upload => $value );

( L<CURLOPT_UPLOAD|https://curl.se/libcurl/c/CURLOPT_UPLOAD.html> )

=head2 upload_buffersize

 $curl->setopt( upload_buffersize => $value );

( L<CURLOPT_UPLOAD_BUFFERSIZE|https://curl.se/libcurl/c/CURLOPT_UPLOAD_BUFFERSIZE.html> )

=head2 url

 $curl->setopt( url => $url );

The URL to work with.  This is the only required option.

( L<CURLOPT_URL|https://curl.se/libcurl/c/CURLOPT_URL.html> )

=head2 useragent

 $curl->setopt( useragent => $value );

( L<CURLOPT_USERAGENT|https://curl.se/libcurl/c/CURLOPT_USERAGENT.html> )

=head2 username

 $curl->setopt( username => $value );

( L<CURLOPT_USERNAME|https://curl.se/libcurl/c/CURLOPT_USERNAME.html> )

=head2 userpwd

 $curl->setopt( userpwd => $value );

( L<CURLOPT_USERPWD|https://curl.se/libcurl/c/CURLOPT_USERPWD.html> )

=head2 verbose

 $curl->setopt( verbose => 1 );

Set this to C<1> to make the library display a lot of verbose information about its
operations.  Useful for C<libcurl> and/or protocol debugging and understanding.

You hardly ever want to set this in production, you almost always want this when you
debug/report problems.

( L<CURLOPT_VERBOSE|https://curl.se/libcurl/c/CURLOPT_VERBOSE.html> )

=head2 wildcardmatch

 $curl->setopt( wildcardmatch => $value );

( L<CURLOPT_WILDCARDMATCH|https://curl.se/libcurl/c/CURLOPT_WILDCARDMATCH.html> )

=head2 writedata

 $curl->setopt( writedata => $writedata );

The C<writedata> option is used by the L<writefunction callback|/writefunction>.
This can be any Perl data type, but the default L<writefunction callback|/writefunction>
expects it to be a file handle, and the default value for C<writedata> is
C<STDOUT>.

( L<CURLOPT_WRITEDATA|https://curl.se/libcurl/c/CURLOPT_WRITEDATA.html> )

=head2 writefunction

 $curl->setopt( writefunction => sub ($curl, $content, $writedata) {
   ...
 });

The C<writefunction> callback will be called for each block of content
returned.  The content is passed as the second argument (the scalar uses
L<FFI::Platypus::Buffer/window> to efficiently expose the data
without having to copy it).  If an exception is thrown, then an
error will be passed back to curl (in the form of zero bytes
handled).

The callback also gets passed the L<Net::Swirl::CurlEasy> instance as
its first argument, and the L<writedata|/writedata> option as its third argument.

( L<CURLOPT_WRITEFUNCTION|https://curl.se/libcurl/c/CURLOPT_WRITEFUNCTION.html> )

=head2 xoauth2_bearer

 $curl->setopt( xoauth2_bearer => $value );

( L<CURLOPT_XOAUTH2_BEARER|https://curl.se/libcurl/c/CURLOPT_XOAUTH2_BEARER.html> )

=head1 CAVEATS

The following options available in the C API are not currently supported by
L<Net::Swirl::CurlEasy>:

=over 4

=item CAINFO_BLOB

=item CHUNK_BGN_FUNCTION

=item CHUNK_DATA

=item CHUNK_END_FUNCTION

=item CLOSESOCKETDATA

=item CLOSESOCKETFUNCTION

=item CONV_FROM_NETWORK_FUNCTION

=item CONV_FROM_UTF8_FUNCTION

=item CONV_TO_NETWORK_FUNCTION

=item CURLU

=item DEBUGDATA

=item DEBUGFUNCTION

=item ERRORBUFFER

=item FNMATCH_DATA

=item FNMATCH_FUNCTION

=item FTPSSLAUTH

=item FTP_FILEMETHOD

=item GSSAPI_DELEGATION

=item HEADEROPT

=item HSTSREADDATA

=item HSTSREADFUNCTION

=item HSTSWRITEDATA

=item HSTSWRITEFUNCTION

=item HTTPAUTH

=item HTTPPOST

=item HTTP_VERSION

=item INTERLEAVEDATA

=item INTERLEAVEFUNCTION

=item IOCTLDATA

=item IOCTLFUNCTION

=item IPRESOLVE

=item ISSUERCERT_BLOB

=item MIMEPOST

=item NETRC

=item OPENSOCKETDATA

=item OPENSOCKETFUNCTION

=item POSTREDIR

=item PREREQDATA

=item PREREQFUNCTION

=item PRIVATE

=item PROGRESSFUNCTION

=item PROXYAUTH

=item PROXYTYPE

=item PROXY_CAINFO_BLOB

=item PROXY_ISSUERCERT_BLOB

=item PROXY_SSLCERT_BLOB

=item PROXY_SSLKEY_BLOB

=item PROXY_SSLVERSION

=item RESOLVER_START_DATA

=item RESOLVER_START_FUNCTION

=item RTSP_REQUEST

=item SEEKDATA

=item SEEKFUNCTION

=item SHARE

=item SOCKOPTDATA

=item SOCKOPTFUNCTION

=item SSH_AUTH_TYPES

=item SSH_HOSTKEYDATA

=item SSH_HOSTKEYFUNCTION

=item SSH_KEYDATA

=item SSH_KEYFUNCTION

=item SSLCERT_BLOB

=item SSLKEY_BLOB

=item SSLVERSION

=item SSL_CTX_DATA

=item SSL_CTX_FUNCTION

=item SSL_OPTIONS

=item STDERR

=item STREAM_DEPENDS

=item STREAM_DEPENDS_E

=item TIMECONDITION

=item TRAILERDATA

=item TRAILERFUNCTION

=item USE_SSL

=item XFERINFODATA

=item XFERINFOFUNCTION

=back

=cut

  package Net::Swirl::CurlEasy {
    our %opt = (%opt,
      abstract_unix_socket => [ 10264, \&_setopt_stringpoint ],
      accept_encoding => [ 10102, \&_setopt_stringpoint ],
      accepttimeout_ms => [ 212, \&_setopt_long ],
      address_scope => [ 171, \&_setopt_long ],
      altsvc => [ 10287, \&_setopt_stringpoint ],
      altsvc_ctrl => [ 286, \&_setopt_long ],
      append => [ 50, \&_setopt_long ],
      autoreferer => [ 58, \&_setopt_long ],
      aws_sigv4 => [ 10305, \&_setopt_stringpoint ],
      buffersize => [ 98, \&_setopt_long ],
      cainfo => [ 10065, \&_setopt_stringpoint ],
      capath => [ 10097, \&_setopt_stringpoint ],
      certinfo => [ 172, \&_setopt_long ],
      connect_only => [ 141, \&_setopt_long ],
      connect_to => [ 10243, \&_setopt_slistpoint ],
      connecttimeout => [ 78, \&_setopt_long ],
      connecttimeout_ms => [ 156, \&_setopt_long ],
      cookie => [ 10022, \&_setopt_stringpoint ],
      cookiefile => [ 10031, \&_setopt_stringpoint ],
      cookiejar => [ 10082, \&_setopt_stringpoint ],
      cookielist => [ 10135, \&_setopt_stringpoint ],
      cookiesession => [ 96, \&_setopt_long ],
      crlf => [ 27, \&_setopt_long ],
      crlfile => [ 10169, \&_setopt_stringpoint ],
      customrequest => [ 10036, \&_setopt_stringpoint ],
      default_protocol => [ 10238, \&_setopt_stringpoint ],
      dirlistonly => [ 48, \&_setopt_long ],
      disallow_username_in_url => [ 278, \&_setopt_long ],
      dns_cache_timeout => [ 92, \&_setopt_long ],
      dns_interface => [ 10221, \&_setopt_stringpoint ],
      dns_local_ip4 => [ 10222, \&_setopt_stringpoint ],
      dns_local_ip6 => [ 10223, \&_setopt_stringpoint ],
      dns_servers => [ 10211, \&_setopt_stringpoint ],
      dns_shuffle_addresses => [ 275, \&_setopt_long ],
      dns_use_global_cache => [ 91, \&_setopt_long ],
      doh_ssl_verifyhost => [ 307, \&_setopt_long ],
      doh_ssl_verifypeer => [ 306, \&_setopt_long ],
      doh_ssl_verifystatus => [ 308, \&_setopt_long ],
      doh_url => [ 10279, \&_setopt_stringpoint ],
      egdsocket => [ 10077, \&_setopt_stringpoint ],
      expect_100_timeout_ms => [ 227, \&_setopt_long ],
      failonerror => [ 45, \&_setopt_long ],
      filetime => [ 69, \&_setopt_long ],
      followlocation => [ 52, \&_setopt_long ],
      forbid_reuse => [ 75, \&_setopt_long ],
      fresh_connect => [ 74, \&_setopt_long ],
      ftp_account => [ 10134, \&_setopt_stringpoint ],
      ftp_alternative_to_user => [ 10147, \&_setopt_stringpoint ],
      ftp_create_missing_dirs => [ 110, \&_setopt_long ],
      ftp_skip_pasv_ip => [ 137, \&_setopt_long ],
      ftp_ssl_ccc => [ 154, \&_setopt_long ],
      ftp_use_eprt => [ 106, \&_setopt_long ],
      ftp_use_epsv => [ 85, \&_setopt_long ],
      ftp_use_pret => [ 188, \&_setopt_long ],
      ftpport => [ 10017, \&_setopt_stringpoint ],
      happy_eyeballs_timeout_ms => [ 271, \&_setopt_long ],
      haproxyprotocol => [ 274, \&_setopt_long ],
      header => [ 42, \&_setopt_long ],
      hsts => [ 10300, \&_setopt_stringpoint ],
      hsts_ctrl => [ 299, \&_setopt_long ],
      http09_allowed => [ 285, \&_setopt_long ],
      http200aliases => [ 10104, \&_setopt_slistpoint ],
      http_content_decoding => [ 158, \&_setopt_long ],
      http_transfer_decoding => [ 157, \&_setopt_long ],
      httpget => [ 80, \&_setopt_long ],
      httpheader => [ 10023, \&_setopt_slistpoint ],
      httpproxytunnel => [ 61, \&_setopt_long ],
      ignore_content_length => [ 136, \&_setopt_long ],
      infilesize => [ 14, \&_setopt_long ],
      infilesize_large => [ 30115, \&_setopt_off_t ],
      interface => [ 10062, \&_setopt_stringpoint ],
      issuercert => [ 10170, \&_setopt_stringpoint ],
      keep_sending_on_error => [ 245, \&_setopt_long ],
      keypasswd => [ 10026, \&_setopt_stringpoint ],
      krblevel => [ 10063, \&_setopt_stringpoint ],
      localport => [ 139, \&_setopt_long ],
      localportrange => [ 140, \&_setopt_long ],
      login_options => [ 10224, \&_setopt_stringpoint ],
      low_speed_limit => [ 19, \&_setopt_long ],
      low_speed_time => [ 20, \&_setopt_long ],
      mail_auth => [ 10217, \&_setopt_stringpoint ],
      mail_from => [ 10186, \&_setopt_stringpoint ],
      mail_rcpt => [ 10187, \&_setopt_slistpoint ],
      mail_rcpt_alllowfails => [ 290, \&_setopt_long ],
      max_recv_speed_large => [ 30146, \&_setopt_off_t ],
      max_send_speed_large => [ 30145, \&_setopt_off_t ],
      maxage_conn => [ 288, \&_setopt_long ],
      maxconnects => [ 71, \&_setopt_long ],
      maxfilesize => [ 114, \&_setopt_long ],
      maxfilesize_large => [ 30117, \&_setopt_off_t ],
      maxlifetime_conn => [ 314, \&_setopt_long ],
      maxredirs => [ 68, \&_setopt_long ],
      mime_options => [ 315, \&_setopt_long ],
      netrc_file => [ 10118, \&_setopt_stringpoint ],
      new_directory_perms => [ 160, \&_setopt_long ],
      new_file_perms => [ 159, \&_setopt_long ],
      nobody => [ 44, \&_setopt_long ],
      noprogress => [ 43, \&_setopt_long ],
      noproxy => [ 10177, \&_setopt_stringpoint ],
      nosignal => [ 99, \&_setopt_long ],
      password => [ 10174, \&_setopt_stringpoint ],
      path_as_is => [ 234, \&_setopt_long ],
      pinnedpublickey => [ 10230, \&_setopt_stringpoint ],
      pipewait => [ 237, \&_setopt_long ],
      port => [ 3, \&_setopt_long ],
      post => [ 47, \&_setopt_long ],
      postfieldsize => [ 60, \&_setopt_long ],
      postfieldsize_large => [ 30120, \&_setopt_off_t ],
      postquote => [ 10039, \&_setopt_slistpoint ],
      pre_proxy => [ 10262, \&_setopt_stringpoint ],
      prequote => [ 10093, \&_setopt_slistpoint ],
      protocols => [ 181, \&_setopt_long ],
      protocols_str => [ 10318, \&_setopt_stringpoint ],
      proxy => [ 10004, \&_setopt_stringpoint ],
      proxy_cainfo => [ 10246, \&_setopt_stringpoint ],
      proxy_capath => [ 10247, \&_setopt_stringpoint ],
      proxy_crlfile => [ 10260, \&_setopt_stringpoint ],
      proxy_issuercert => [ 10296, \&_setopt_stringpoint ],
      proxy_keypasswd => [ 10258, \&_setopt_stringpoint ],
      proxy_pinnedpublickey => [ 10263, \&_setopt_stringpoint ],
      proxy_service_name => [ 10235, \&_setopt_stringpoint ],
      proxy_ssl_cipher_list => [ 10259, \&_setopt_stringpoint ],
      proxy_ssl_options => [ 261, \&_setopt_long ],
      proxy_ssl_verifyhost => [ 249, \&_setopt_long ],
      proxy_ssl_verifypeer => [ 248, \&_setopt_long ],
      proxy_sslcert => [ 10254, \&_setopt_stringpoint ],
      proxy_sslcerttype => [ 10255, \&_setopt_stringpoint ],
      proxy_sslkey => [ 10256, \&_setopt_stringpoint ],
      proxy_sslkeytype => [ 10257, \&_setopt_stringpoint ],
      proxy_tls13_ciphers => [ 10277, \&_setopt_stringpoint ],
      proxy_tlsauth_password => [ 10252, \&_setopt_stringpoint ],
      proxy_tlsauth_type => [ 10253, \&_setopt_stringpoint ],
      proxy_tlsauth_username => [ 10251, \&_setopt_stringpoint ],
      proxy_transfer_mode => [ 166, \&_setopt_long ],
      proxyheader => [ 10228, \&_setopt_slistpoint ],
      proxypassword => [ 10176, \&_setopt_stringpoint ],
      proxyport => [ 59, \&_setopt_long ],
      proxyusername => [ 10175, \&_setopt_stringpoint ],
      proxyuserpwd => [ 10006, \&_setopt_stringpoint ],
      put => [ 54, \&_setopt_long ],
      quote => [ 10028, \&_setopt_slistpoint ],
      random_file => [ 10076, \&_setopt_stringpoint ],
      range => [ 10007, \&_setopt_stringpoint ],
      redir_protocols => [ 182, \&_setopt_long ],
      redir_protocols_str => [ 10319, \&_setopt_stringpoint ],
      referer => [ 10016, \&_setopt_stringpoint ],
      request_target => [ 10266, \&_setopt_stringpoint ],
      resolve => [ 10203, \&_setopt_slistpoint ],
      resume_from => [ 21, \&_setopt_long ],
      resume_from_large => [ 30116, \&_setopt_off_t ],
      rtsp_client_cseq => [ 193, \&_setopt_long ],
      rtsp_server_cseq => [ 194, \&_setopt_long ],
      rtsp_session_id => [ 10190, \&_setopt_stringpoint ],
      rtsp_stream_uri => [ 10191, \&_setopt_stringpoint ],
      rtsp_transport => [ 10192, \&_setopt_stringpoint ],
      sasl_authzid => [ 10289, \&_setopt_stringpoint ],
      sasl_ir => [ 218, \&_setopt_long ],
      server_response_timeout => [ 112, \&_setopt_long ],
      service_name => [ 10236, \&_setopt_stringpoint ],
      socks5_auth => [ 267, \&_setopt_long ],
      socks5_gssapi_nec => [ 180, \&_setopt_long ],
      socks5_gssapi_service => [ 10179, \&_setopt_stringpoint ],
      ssh_compression => [ 268, \&_setopt_long ],
      ssh_host_public_key_md5 => [ 10162, \&_setopt_stringpoint ],
      ssh_host_public_key_sha256 => [ 10311, \&_setopt_stringpoint ],
      ssh_knownhosts => [ 10183, \&_setopt_stringpoint ],
      ssh_private_keyfile => [ 10153, \&_setopt_stringpoint ],
      ssh_public_keyfile => [ 10152, \&_setopt_stringpoint ],
      ssl_cipher_list => [ 10083, \&_setopt_stringpoint ],
      ssl_ec_curves => [ 10298, \&_setopt_stringpoint ],
      ssl_enable_alpn => [ 226, \&_setopt_long ],
      ssl_enable_npn => [ 225, \&_setopt_long ],
      ssl_falsestart => [ 233, \&_setopt_long ],
      ssl_sessionid_cache => [ 150, \&_setopt_long ],
      ssl_verifyhost => [ 81, \&_setopt_long ],
      ssl_verifypeer => [ 64, \&_setopt_long ],
      ssl_verifystatus => [ 232, \&_setopt_long ],
      sslcert => [ 10025, \&_setopt_stringpoint ],
      sslcerttype => [ 10086, \&_setopt_stringpoint ],
      sslengine => [ 10089, \&_setopt_stringpoint ],
      sslengine_default => [ 90, \&_setopt_long ],
      sslkey => [ 10087, \&_setopt_stringpoint ],
      sslkeytype => [ 10088, \&_setopt_stringpoint ],
      stream_weight => [ 239, \&_setopt_long ],
      suppress_connect_headers => [ 265, \&_setopt_long ],
      tcp_fastopen => [ 244, \&_setopt_long ],
      tcp_keepalive => [ 213, \&_setopt_long ],
      tcp_keepidle => [ 214, \&_setopt_long ],
      tcp_keepintvl => [ 215, \&_setopt_long ],
      tcp_nodelay => [ 121, \&_setopt_long ],
      telnetoptions => [ 10070, \&_setopt_slistpoint ],
      tftp_blksize => [ 178, \&_setopt_long ],
      tftp_no_options => [ 242, \&_setopt_long ],
      timeout => [ 13, \&_setopt_long ],
      timeout_ms => [ 155, \&_setopt_long ],
      timevalue => [ 34, \&_setopt_long ],
      timevalue_large => [ 30270, \&_setopt_off_t ],
      tls13_ciphers => [ 10276, \&_setopt_stringpoint ],
      tlsauth_password => [ 10205, \&_setopt_stringpoint ],
      tlsauth_type => [ 10206, \&_setopt_stringpoint ],
      tlsauth_username => [ 10204, \&_setopt_stringpoint ],
      transfer_encoding => [ 207, \&_setopt_long ],
      transfertext => [ 53, \&_setopt_long ],
      unix_socket_path => [ 10231, \&_setopt_stringpoint ],
      unrestricted_auth => [ 105, \&_setopt_long ],
      upkeep_interval_ms => [ 281, \&_setopt_long ],
      upload => [ 46, \&_setopt_long ],
      upload_buffersize => [ 280, \&_setopt_long ],
      url => [ 10002, \&_setopt_stringpoint ],
      useragent => [ 10018, \&_setopt_stringpoint ],
      username => [ 10173, \&_setopt_stringpoint ],
      userpwd => [ 10005, \&_setopt_stringpoint ],
      verbose => [ 41, \&_setopt_long ],
      wildcardmatch => [ 197, \&_setopt_long ],
      xoauth2_bearer => [ 10220, \&_setopt_stringpoint ],
    );
  }
}

1;

__END__

=head1 SEE ALSO

=over 4

=item L<Net::Swirl::CurlEasy>

Main documentation for the Swirl C<curl> "easy" API.

=item L<Net::Swirl::CurlEasy::Const>

Full list of constants used by L<Net::Swirl::CurlEasy>.

=item L<Net::Swirl::CurlEasy::Info>

Full list of information items available to this API.

=back

=cut
