name             = Net-Swirl-CurlEasy
author           = Graham Ollis <plicease@cpan.org>
license          = Perl_5
copyright_holder = Graham Ollis
copyright_year   = 2022
version          = 0.01

[@Author::Plicease]
:version       = 2.72
release_tests  = 1
installer      = Author::Plicease::MakeMaker
github_user    = uperl
default_branch = main
test2_v0       = 1
irc            = irc://irc.perl.org/#native
version_plugin = PkgVersion::Block

diag_preamble = | $post_diag = sub {
diag_preamble = |   local $@='';
diag_preamble = |   my $lib = eval {
diag_preamble = |     require './lib/Net/Swirl/CurlEasy/FFI.pm';
diag_preamble = |     Net::Swirl::CurlEasy::FFI->lib;
diag_preamble = |   };
diag_preamble = |   warn $@ if $@;
diag_preamble = |   diag "libcurl = @{[ $lib // 'undef' ]}";
diag_preamble = |   $@ = '';
diag_preamble = |   my $version = eval {
diag_preamble = |     require FFI::Platypus;
diag_preamble = |     FFI::Platypus->VERSION("2.00");
diag_preamble = |     my $ffi = FFI::Platypus->new( api => 2, lib => [$lib] );
diag_preamble = |     $ffi->function('curl_version' => [] => 'string')->call;
diag_preamble = |   };
diag_preamble = |   warn $@ if $@;
diag_preamble = |   if(defined $version) {
diag_preamble = |     diag "version = $_" for split /\s+/, $version;
diag_preamble = |   }
diag_preamble = |   unless($ENV{TEST_EXAMPLES}) {
diag_preamble = |     diag '';
diag_preamble = |     diag '';
diag_preamble = |     diag 'NOT TESTING EXAMPLES.';
diag_preamble = |     diag '(you can test examples by setting env TEST_EXAMPLES=1)';
diag_preamble = |     diag '(screen, Plack and other deps may be required)';
diag_preamble = |   }
diag_preamble = | };


diag = +Alien::curl

workflow = static
workflow = linux
workflow = ref

[Prereqs]
FFI::Platypus::Type::Enum = 0

[Prereqs / ConfigureRequires]
FFI::CheckLib = 0.30

[Prereqs / TestRequires]
HTTP::Response = 0

[Author::Plicease::Core]

[Author::Plicease::Upload]
cpan = 1

[DynamicPrereqs / Alien]
-condition = do { require './lib/Net/Swirl/CurlEasy/FFI.pm'; ! eval { Net::Swirl::CurlEasy::FFI->lib; 1 } }
-body      = requires('Alien::curl', '0.10');

[InsertExample]

[PruneFiles]
match = ^examples/tls/logs/.*\.log
match = ^examples/tls/logs/.*\.pid
match = ^examples/tls/tmp/client
match = ^examples/tls/tmp/fastcgi
match = ^examples/tls/tmp/proxy
match = ^examples/tls/tmp/scgi
match = ^examples/tls/tmp/uwsgi

[GatherFile]
filename = examples/tls/tmp/.exists
filename = examples/tls/logs/.exists

